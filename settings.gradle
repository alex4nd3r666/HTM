pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven { url "https://maven.architectury.dev/" }
        maven { url "https://files.minecraftforge.net/maven/" }
        maven { url "https://maven.fabricmc.net/" }
        maven { url "https://maven.wagyourtail.xyz/releases" }
        maven { url "https://maven.wagyourtail.xyz/snapshots" }
        exclusiveContent {
            forRepository {
                maven {
                    name = 'Sponge'
                    url = uri('https://repo.spongepowered.org/repository/maven-public')
                }
            }
            filter {
                includeGroupAndSubgroups("org.spongepowered")
            }
        }
        exclusiveContent {
            forRepository {
                maven {
                    name = 'Forge'
                    url = uri('https://maven.minecraftforge.net')
                }
            }
            filter {
                includeGroupAndSubgroups('net.minecraftforge')
            }
        }
    }
}

def loadVersionProperties() {
    // Get all the files in "versionProperties", as we're getting the file names, we should remove the ".properties" at the end to get the versions
    def mcVers = fileTree("versionProperties").files.collect { it.name.replaceAll("\\.properties", "") }
        .sort { a, b -> // Sort it so it always goes from oldest to newest using semantic versioning
            def aParts = a.tokenize('.'); def bParts = b.tokenize('.')
            for (int i = 0; i < Math.min(aParts.size(), bParts.size()); i++) {
                def aNum = aParts[i].isInteger() ? aParts[i].toInteger() : aParts[i]
                def bNum = bParts[i].isInteger() ? bParts[i].toInteger() : bParts[i]
                def compare = aNum <=> bNum
                if (compare != 0) return compare
            }
            return aParts.size() <=> bParts.size()
        }
    def mcVersion = hasProperty("mc_ver") ? mc_ver : ""
    def mcIndex = mcVers.indexOf(mcVersion)

    assert mcIndex != -1 : "MC version $mcVersion not found in $mcVers. Is the 'mc_ver' property correctly set?"

    def props = new Properties()
    props.load(new FileInputStream("$rootDir/versionProperties/${mcVersion}.properties"))

    props.each { key, value -> gradle.ext.set(key, value) }
    gradle.ext.mcVers = mcVers
    gradle.ext.mcIndex = mcIndex
}
loadVersionProperties()

include('common')
((String) gradle.builds_for).split(",").each { loader ->
    include(loader.trim())
}

rootProject.name = 'htm'
